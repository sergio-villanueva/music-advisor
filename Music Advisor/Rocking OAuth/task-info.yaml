type: edu
custom_name: stage2
files:
- name: build.gradle
  visible: true
  text: |-
    apply plugin: 'java'
    apply plugin: 'application'

    group 'advisor'
    version '1.0-SNAPSHOT'

    repositories {
        mavenCentral()
    }

    dependencies {
        implementation 'com.google.code.gson:gson:+'
    }

    jar {
        manifest {
            attributes 'Main-Class' : 'advisor.Main'
        }
        from {
            configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
        }
    }
  learner_created: false
- name: src/advisor/Main.java
  visible: true
  text: |
    package advisor;
    import music.Album;
    import music.MusicAdvisor;
    import music.Playlist;

    import java.util.*;

    public class Main {
        public static void main(String[] args) {


            MusicAdvisor advisor = new MusicAdvisor();
            boolean exitSystem = false;

            try (Scanner scanner = new Scanner(System.in)) {
                while (!exitSystem) {
                    //displayMainMenu();
                    // fetch user input
                    String[] mainOption = scanner.nextLine().trim().split(" ");

                    switch (mainOption[0]) {
                        case "new":
                            System.out.println("---NEW RELEASES---");
                            Album[] newAlbums = advisor.newAlbums();
                            for (Album album : newAlbums) {
                                System.out.println(album.getCoverDetails());
                            }
                            System.out.println();
                            break;
                        case "featured":
                            System.out.println("---FEATURED---");
                            Playlist[] featuredPlaylists = advisor.featured();
                            for (Playlist playlist : featuredPlaylists) {
                                System.out.println(playlist.getName());
                            }
                            System.out.println();
                            break;
                        case "categories":
                            System.out.println("---CATEGORIES---");
                            String[] categories = advisor.getCategories();
                            for (String category : categories) {
                                System.out.println(category);
                            }
                            System.out.println();
                            break;
                        case "playlists":
                            System.out.println("---" + mainOption[1].toUpperCase() + " PLAYLISTS---");
                            List<String> categoryList = Arrays.asList(advisor.getCategories());
                            boolean validCategory = categoryList.contains(mainOption[1]);
                            if (validCategory) {

                                Playlist[] requestedPlaylists = advisor.getPlaylists(mainOption[1]);
                                for (Playlist playlist : requestedPlaylists) {
                                    System.out.println(playlist.getName());
                                }
                                System.out.println();

                            } else {

                                System.out.println("Invalid Category");

                            }
                            break;
                        case "exit":
                            System.out.println("---GOODBYE!---");
                            exitSystem = true;
                            break;
                        default:
                            System.out.println("Invalid Keyword: Try Again");
                    }
                }
            }

        }

        static void displayMainMenu() {
            System.out.println("Enter one of the following options:");
            System.out.println("featured - retrieve the latest playlists from Spotify");
            System.out.println("new - retrieve the newest albums");
            System.out.println("categories - view the many music categories on offer");
            System.out.println("exit - shut down");
            System.out.println();
        }
    }
  learner_created: false
- name: test/MusicAdvisorTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.List;
    import java.util.function.Function;

    class Attach {
        Function<String, CheckResult> func;

        Attach(Function<String, CheckResult> func) {
            this.func = func;
        }
    }

    public class MusicAdvisorTest extends StageTest<Attach> {

        @Override
        public List<TestCase<Attach>> generate() {
            return List.of(
                new TestCase<Attach>()
                    .setInput("auth\nexit")
                    .setAttach(new Attach(reply -> {
                        if (!reply.contains("---SUCCESS---")) {
                            return new CheckResult(false,
                                "There is no \"---SUCCESS---\" after \"auth\" but should be");
                        }
                        if (!reply.contains("https://accounts.spotify.com/authorize?")) {
                            return new CheckResult(false,
                                "There is no link after \"auth\" but should be");
                        }
                        if (reply.contains("a19ee7dbfda443b2a8150c9101bfd645")) {
                            return new CheckResult(false,
                                    "You shouldn't use the client_id from the example!! " +
                                            "You should create your own id on the spotify site.");
                        }
                        return CheckResult.correct();
                    })),

                new TestCase<Attach>()
                    .setInput("new\nexit")
                    .setAttach(new Attach(reply -> {
                        if (!reply.strip().startsWith("Please, provide access for application.")) {
                            return new CheckResult(false,
                                "When no access provided you should output " +
                                    "\"Please, provide access for application.\"");
                        }
                        return CheckResult.correct();
                    })),

                new TestCase<Attach>()
                    .setInput("featured\nexit")
                    .setAttach(new Attach(reply -> {
                        if (!reply.strip().startsWith("Please, provide access for application.")) {
                            return new CheckResult(false,
                                "When no access provided you should output " +
                                    "\"Please, provide access for application.\"");
                        }
                        return CheckResult.correct();
                    })),

                new TestCase<Attach>()
                    .setInput("auth\nnew\nfeatured\nexit")
                    .setAttach(new Attach(reply -> {
                        if (!reply.contains("---NEW RELEASES---")) {
                            return new CheckResult(false,
                                "When \"new\" was inputted there should be \"---NEW RELEASES---\" line");
                        }
                        if (!reply.contains("---FEATURED---")) {
                            return new CheckResult(false,
                                "When \"featured\" was inputted there should be \"---FEATURED---\" line");
                        }
                        return CheckResult.correct();
                    }))

            );
        }

        @Override
        public CheckResult check(String reply, Attach clue) {
            return clue.func.apply(reply);
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/62/stages/336/implement#comment
status: Solved
record: 2
